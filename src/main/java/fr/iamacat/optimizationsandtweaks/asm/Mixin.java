package fr.iamacat.optimizationsandtweaks.asm;

import java.util.List;
import java.util.function.Predicate;

import com.falsepattern.lib.mixin.IMixin;
import com.falsepattern.lib.mixin.ITargetedMod;

import fr.iamacat.optimizationsandtweaks.config.OptimizationsandTweaksConfig;
import lombok.Getter;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public enum Mixin implements IMixin {

    common_core_MixinWorld(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinWorld, "core.MixinWorld"),
    common_core_MixinEventBus(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEventBus, "core.MixinEventBus"),
    common_core_MixinEnchantmentHelper(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEnchantmentHelper,
        "core.MixinEnchantmentHelper"),
    common_packagedauto_MixinNeiHandlerPackagedAuto(Side.COMMON,
        require(TargetedMod.PACKAGEDAUTO).and(m -> OptimizationsandTweaksConfig.enableMixinNeiHandlerPackagedAuto),
        "packagedauto.MixinNeiHandlerPackagedAuto"),
    common_lotrimprovements_MixinMain(Side.COMMON,
        require(TargetedMod.LORDOFTHERINGSFORK).and(m -> OptimizationsandTweaksConfig.enableMixinMain),
        "lotrimprovements.MixinMain"),
    common_disastercraft_MixinBiomeListDisaster(Side.COMMON,
        require(TargetedMod.DISASTERCRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinAddConfigForDisastercraft),
        "disastercraft.MixinBiomeListDisaster"),

    common_disastercraft_MixinMainDisastercraft(Side.COMMON,
        require(TargetedMod.DISASTERCRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinAddConfigForDisastercraft),
        "disastercraft.MixinMainDisastercraft"),
    common_minegicka_MixinModBaseMinegicka(Side.COMMON,
        require(TargetedMod.MINEGICKA).and(m -> OptimizationsandTweaksConfig.enableMixinModBaseMinegicka),
        "minegicka.MixinModBaseMinegicka"),
    common_animalsplus_MixinEntitySwimming(Side.COMMON,
        require(TargetedMod.ANIMALSPLUS).and(m -> OptimizationsandTweaksConfig.enableMixinEntitySwimming),
        "animalsplus.MixinEntitySwimming"),
    common_lotr_MixinLOTRMod(Side.COMMON,
        require(TargetedMod.LORDOFTHERINGS).and(
            avoid(TargetedMod.LORDOFTHERINGSFORK)
                .and(m -> OptimizationsandTweaksConfig.enableMixinAddConfigForLOTRBIOMEIDS)),
        "lotr.MixinLOTRMod"),
    common_lotr_MixinLOTRBiome(Side.COMMON,
        require(TargetedMod.LORDOFTHERINGS).and(
            avoid(TargetedMod.LORDOFTHERINGSFORK)
                .and(m -> OptimizationsandTweaksConfig.enableMixinAddConfigForLOTRBIOMEIDS)),
        "lotr.MixinLOTRBiome"),
    common_lotr_MixinLOTRWorldProvider(Side.COMMON,
        avoid(TargetedMod.LORDOFTHERINGSFORK)
            .and(require(TargetedMod.ENDLESSIDS).and(m -> OptimizationsandTweaksConfig.MixinLOTRWorldProvider)),
        "lotr.MixinLOTRWorldProvider"),

    common_mowziesmobs_MixinStructureGeneratorBaseMM(Side.COMMON,
        require(TargetedMod.MOWZIESMOBS).and(m -> OptimizationsandTweaksConfig.enableMixinStructureGeneratorBaseMM),
        "mowziesmobs.MixinStructureGeneratorBaseMM"),

    common_minestones_MixinItemMinestone(Side.COMMON,
        require(TargetedMod.MINESTONES).and(m -> OptimizationsandTweaksConfig.enableMixinItemMinestone),
        "minestones.MixinItemMinestone"),

    common_minestones_MixinMSConfig(Side.COMMON,
        require(TargetedMod.MINESTONES).and(m -> OptimizationsandTweaksConfig.enableMixinMinestoneSupportDecimalValue),
        "minestones.MixinMSConfig"),
    common_minestones_MixinMSEvents(Side.COMMON,
        require(TargetedMod.MINESTONES).and(m -> OptimizationsandTweaksConfig.enableMixinMinestoneSupportDecimalValue),
        "minestones.MixinMSEvents"),
    common_core_MixinBlockFluidClassic(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinBlockFluidClassic,
        "core.MixinBlockFluidClassic"),
    common_core_MixinChunkProviderServer(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinChunkProviderServer,
        "core.MixinChunkProviderServer"),
    /*
     * common_core_MixinEntityRegistry(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityRegistry,
     * "core.MixinEntityRegistry"),
     */
    common_core_MixinWorldType(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinWorldType,
        "core.MixinWorldType"),
    common_core_MixinFMLClientHandler(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinFMLClientHandler,
        "core.MixinFMLClientHandler"),
    common_core_MixinFMLServerHandler(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinFMLServerHandler,
        "core.MixinFMLServerHandler"),
    /*
     * todo need to fix was loaded to early crash
     * common_core_MixinLoader(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinLoader,
     * "core.MixinLoader"),
     */
    common_core_MixinMinecraft(Side.COMMON,
        avoid(TargetedMod.FALSETWEAKS).and(m -> OptimizationsandTweaksConfig.enableMixinMinecraft),
        "core.MixinMinecraft"),
    server_core_MixinMinecraftServerGui(Side.SERVER, m -> OptimizationsandTweaksConfig.enableMixinMinecraftServerGui,
        "core.MixinMinecraftServerGui"),
    common_core_MixinSaveFormatOld(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinSaveFormatOld,
        "core.MixinSaveFormatOld"),
    common_core_MixinThreadedFileIOBase(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinThreadedFileIOBase,
        "core.MixinThreadedFileIOBase"),

    common_core_MixinVec3(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinVec3, "core.MixinVec3"),

    common_core_MixinEntityAINearestAttackableTarget(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enableMixinEntityAINearestAttackableTarget,
        "core.MixinEntityAINearestAttackableTarget"),
    common_core_MixinEntityList(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityList,
        "core.MixinEntityList"),
    common_core_MixinNBTTagCompound(Side.COMMON,
        avoid(TargetedMod.DRAGONAPI).and(m -> OptimizationsandTweaksConfig.enableMixinNBTTagCompound),
        "core.MixinNBTTagCompound"),

    common_core_MixinMapGenStructure(Side.COMMON,
        avoid(TargetedMod.DRAGONAPI).and(m -> OptimizationsandTweaksConfig.enableMixinMapGenStructure),
        "core.MixinMapGenStructure"),

    common_core_MixinEntityArrowAttack(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityArrowAttack,
        "core.MixinEntityArrowAttack"),
    common_core_MixinEntityAITarget(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityAITarget,
        "core.MixinEntityAITarget"),
    common_core_MixinAxisAlignedBB(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinAxisAlignedBB,
        "core.MixinAxisAlignedBB"),
    common_core_MixinEntityAITempt(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityAITempt,
        "core.MixinEntityAITempt"),

    common_easybreeding_MixinEntityAIEatDroppedFood(Side.COMMON,
        require(TargetedMod.EASYBREEDING).and(m -> OptimizationsandTweaksConfig.enableMixinEntityAIEatDroppedFood),
        "easybreeding.MixinEntityAIEatDroppedFood"),
    common_core_MixinRandomPositionGenerator(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enableMixinRandomPositionGenerator, "core.MixinRandomPositionGenerator"),
    common_core_MixinEntityAIWander(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityAIWander,
        "core.MixinEntityAIWander"),
    common_core_MixinEntityAIPlay(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityAIPlay,
        "core.MixinEntityAIPlay"),
    common_core_MixinEntityAIAttackOnCollide(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enableMixinEntityAIAttackOnCollide, "core.MixinEntityAIAttackOnCollide"),

    common_core_MixinServersideAttributeMap(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enableMixinServersideAttributeMap, "core.MixinServersideAttributeMap"),
    common_core_MixinLowerStringMap(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinLowerStringMap,
        "core.MixinLowerStringMap"),
    common_core_MixinEntityLivingBase(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityLivingBase,
        "core.MixinEntityLivingBase"),
    common_core_MixinDataWatcher(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinDataWatcher,
        "core.MixinDataWatcher"),

    common_core_MixinNibbleArray(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinNibbleArray,
        "core.MixinNibbleArray"),
    common_blocklings_MixinEntityBlockling(Side.COMMON,
        require(TargetedMod.BLOCKLINGS).and(m -> OptimizationsandTweaksConfig.enableMixinSteamcraftEventHandler),
        "blocklings.MixinEntityBlockling"),
    common_flaxbeardssteampower_MixinSteamcraftEventHandler(Side.COMMON,
        require(TargetedMod.FLAXBEARDSTEAMPOWER)
            .and(m -> OptimizationsandTweaksConfig.enableMixinSteamcraftEventHandler),
        "flaxbeardssteampower.MixinSteamcraftEventHandler"),
    common_catwalks2_MixinCommonProxy(Side.COMMON, require(TargetedMod.CATWALK2UNOFFICIAL).and(
        avoid(TargetedMod.CATWALK2OFFICIAL).and(m -> OptimizationsandTweaksConfig.enableMixinCommonProxyForCatWalks2)),
        "catwalks2.MixinCommonProxy"),
    common_unuquadium_Mixinmcreator_ununquadiumLand(Side.COMMON,
        require(TargetedMod.UNUNQUADIUM).and(m -> OptimizationsandTweaksConfig.enableMixinmcreator_ununquadiumLand),
        "unuquadium.Mixinmcreator_ununquadiumLand"),
    common_buildcraft_addon_oiltweaks_MixinOilTweakEventHandler(Side.COMMON,
        require(TargetedMod.BUILDCRAFTOILTWEAKS).and(m -> OptimizationsandTweaksConfig.enableMixinOilTweakEventHandler),
        "buildcraft.addon.oiltweaks.MixinOilTweakEventHandler"),
    common_buildcraft_MixinBlockBuildCraftFluid(Side.COMMON,
        require(TargetedMod.BUILDCRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinBlockBuildCraftFluid),
        "buildcraft.MixinBlockBuildCraftFluid"),
    common_sgstreasure_MixinObsidianChestGenerator(Side.COMMON,
        require(TargetedMod.SGSTREASURE).and(m -> OptimizationsandTweaksConfig.enableMixinObsidianChestGenerator),
        "sgstreasure.MixinObsidianChestGenerator"),
    common_sgstreasure_MixinPlansProcessor(Side.COMMON,
        require(TargetedMod.SGSTREASURE).and(m -> OptimizationsandTweaksConfig.enableMixinPlansProcessor),
        "sgstreasure.MixinPlansProcessor"),
    common_sgstreasure_MixinWorldUtilSGSTREASURE(Side.COMMON,
        require(TargetedMod.SGSTREASURE).and(m -> OptimizationsandTweaksConfig.enableMixinWorldUtilSGSTREASURE),
        "sgstreasure.MixinWorldUtilSGSTREASURE"),
    common_core_MixinSaveHandler(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinSaveHandler,
        "core.MixinSaveHandler"),
    common_core_MixinMinecraftServer(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinMinecraftServer,
        "core.MixinMinecraftServer"),
    common_core_MixinMathHelper(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinMathHelper,
        "core.MixinMathHelper"),
    common_core_MixinIntCache(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinIntCache, "core.MixinIntCache"),
    common_core_MixinNetworkManager(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinNetworkManager,
        "core.MixinNetworkManager"),
    common_core_MixinEntity(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntity, "core.MixinEntity"),

    common_core_MixinBlock(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinBlock, "core.MixinBlock"),
    common_core_MixinBlockLeaves(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinBlockLeaves,
        "core.MixinBlockLeaves"),

    common_core_MixinBiomeCache(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinBiomeCache,
        "core.MixinBiomeCache"),

    client_core_MixinRenderBlocks(Side.CLIENT, m -> OptimizationsandTweaksConfig.enableMixinRenderBlocks,
        "core.MixinRenderBlocks"),

    common_core_MixinForgeHooksClient(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinForgeHooksClient,
        "core.MixinForgeHooksClient"),
    common_core_MixinStringTranslate(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinStringTranslate,
        "core.MixinStringTranslate"),
    common_core_MixinBlockDynamicLiquid(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinBlockDynamicLiquid,
        "core.MixinBlockDynamicLiquid"),
    common_core_MixinModifiableAttributeInstance(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enableMixinModifiableAttributeInstance,
        "core.MixinModifiableAttributeInstance"),

    common_core_MixinEntityTracker(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityTracker,
        "core.MixinEntityTracker"),
    /*
     * common_core_pathfinding_MixinPathEntity(Side.COMMON, m ->
     * OptimizationsandTweaksConfig.enablePathfinderOptimizations,
     * "core.pathfinding.MixinPathEntity"),
     * common_core_pathfinding_MixinPathNavigate(Side.COMMON, m ->
     * OptimizationsandTweaksConfig.enablePathfinderOptimizations,
     * "core.pathfinding.MixinPathNavigate"),
     */
    common_core_pathfinding_MixinPathFinder(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enablePathfinderOptimizations, "core.pathfinding.MixinPathFinder"),

    common_core_pathfinding_MixinPathPoint(Side.COMMON, m -> OptimizationsandTweaksConfig.enablePathfinderOptimizations,
        "core.pathfinding.MixinPathPoint"),
    common_core_MixinWorldServer(Side.COMMON,
        avoid(TargetedMod.LAGGOOGLES).and(m -> OptimizationsandTweaksConfig.enableMixinWorldServer),
        "core.MixinWorldServer"),
    common_core_MixinStatsComponent(Side.SERVER, m -> OptimizationsandTweaksConfig.enableMixinStatsComponent,
        "core.MixinStatsComponent"),

    common_core_MixinChunk(Side.COMMON,
        avoid(TargetedMod.BLENDTRONIC).and(m -> OptimizationsandTweaksConfig.enableMixinChunk), "core.MixinChunk"),
    common_netherlicious_MixinVentGeneratorSingle(Side.COMMON,
        require(TargetedMod.NETHERLICIOUS).and(m -> OptimizationsandTweaksConfig.enableMixinVentGeneratorSingle),
        "netherlicious.MixinVentGeneratorSingle"),

    common_netherlicious_MixinWorldGeneratorAdv(Side.COMMON,
        require(TargetedMod.NETHERLICIOUS).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGeneratorAdv),
        "netherlicious.MixinWorldGeneratorAdv"),
    common_netherlicious_MixinCrystalFormationHangingBig(Side.COMMON,
        require(TargetedMod.NETHERLICIOUS).and(m -> OptimizationsandTweaksConfig.enableMixinCrystalFormationHangingBig),
        "netherlicious.MixinCrystalFormationHangingBig"),
    common_netherlicious_MixinCrystalFormationBig(Side.COMMON,
        require(TargetedMod.NETHERLICIOUS).and(m -> OptimizationsandTweaksConfig.enableMixinCrystalFormationBig),
        "netherlicious.MixinCrystalFormationBig"),
    common_netherlicious_MixinNetherliciousEventHandler(Side.COMMON,
        require(TargetedMod.NETHERLICIOUS).and(m -> OptimizationsandTweaksConfig.enableMixinNetherliciousEventHandler),
        "netherlicious.MixinNetherliciousEventHandler"),
    common_netherlicious_MixinBiomeBlobGen(Side.COMMON,
        require(TargetedMod.NETHERLICIOUS).and(m -> OptimizationsandTweaksConfig.enableMixinBiomeBlobGen),
        "netherlicious.MixinBiomeBlobGen"),
    common_netherlicious_MixinRuptureSpike(Side.COMMON,
        require(TargetedMod.NETHERLICIOUS).and(m -> OptimizationsandTweaksConfig.enableMixinRuptureSpike),
        "netherlicious.MixinRuptureSpike"),
    common_KoRIN_MixinKoRINEventHandler(Side.COMMON,
        require(TargetedMod.KORINBLUEBEDROCK).and(m -> OptimizationsandTweaksConfig.enableMixinKoRINEventHandler),
        "KoRIN.MixinKoRINEventHandler"),
    common_coroutil_MixinPFQueue(Side.COMMON,
        require(TargetedMod.COROUTIL).and(m -> OptimizationsandTweaksConfig.enableMixinPFQueue),
        "coroutil.MixinPFQueue"),
    common_zombieawareness_MixinZAUtil(Side.COMMON,
        require(TargetedMod.COROUTIL).and(m -> OptimizationsandTweaksConfig.enableMixinZAUtil),
        "zombieawareness.MixinZAUtil"),
    common_minenautica_MixinBiomeRegistry(Side.COMMON,
        require(TargetedMod.MINENAUTICA).and(m -> OptimizationsandTweaksConfig.enableMixinBiomeRegistryMinenautica),
        "minenautica.MixinBiomeRegistry"),
    common_minenautica_MixinMinenautica(Side.COMMON,
        require(TargetedMod.MINENAUTICA).and(m -> OptimizationsandTweaksConfig.enableMixinBiomeRegistryMinenautica),
        "minenautica.MixinMinenautica"),
    common_lotofmobs_MixinLotsOMobs(Side.COMMON,
        require(TargetedMod.LOTOFMOBS).and(m -> OptimizationsandTweaksConfig.enableMixinBiomeRegistryLotsOMobs),
        "lotofmobs.MixinLotsOMobs"),

    common_lotofmobs_MixinLotsOMobsBiomes(Side.COMMON,
        require(TargetedMod.LOTOFMOBS).and(m -> OptimizationsandTweaksConfig.enableMixinBiomeRegistryLotsOMobs),
        "lotofmobs.MixinLotsOMobsBiomes"),
    common_minenautica_MixinAluminumOxideWorldGen(Side.COMMON,
        require(TargetedMod.MINENAUTICA).and(m -> OptimizationsandTweaksConfig.enableMixinAluminumOxideWorldGen),
        "minenautica.MixinAluminumOxideWorldGen"),
    common_minenautica_MixinGenerateCoral(Side.COMMON,
        require(TargetedMod.MINENAUTICA).and(m -> OptimizationsandTweaksConfig.enableMixinGenerateCoral),
        "minenautica.MixinGenerateCoral"),
    common_minenautica_MixinBloodgrass(Side.COMMON,
        require(TargetedMod.MINENAUTICA).and(m -> OptimizationsandTweaksConfig.enableMixinBloodgrass),
        "minenautica.MixinBloodgrass"),
    common_minenautica_MixinCanBlockStay(Side.COMMON,
        require(TargetedMod.MINENAUTICA).and(m -> OptimizationsandTweaksConfig.enableMixinCanBlockStay),
        "minenautica.MixinCanBlockStay"),
    common_minenautica_MixinBiomeGenGrassyPlateaus(Side.COMMON,
        require(TargetedMod.MINENAUTICA).and(m -> OptimizationsandTweaksConfig.enableMixinBiomeGenGrassyPlateaus),
        "minenautica.MixinBiomeGenGrassyPlateaus"),
    common_minenautica_MixinBiomeGenKelpForest(Side.COMMON,
        require(TargetedMod.MINENAUTICA).and(m -> OptimizationsandTweaksConfig.enableMixinBiomeGenKelpForest),
        "minenautica.MixinBiomeGenKelpForest"),
    common_runicdungeons_MixinCommonProxyRunicDungeons(Side.COMMON,
        require(TargetedMod.RUNICDUNGEONS).and(m -> OptimizationsandTweaksConfig.enableMixinCommonProxyRunicDungeons)
            .and(require(TargetedMod.CONFIGHELPER)),
        "runicdungeons.MixinCommonProxyRunicDungeons"),

    common_toomuchtnt_MixinTooMuchTNT(Side.COMMON,
        require(TargetedMod.TOOMUCHTNT).and(m -> OptimizationsandTweaksConfig.enableMixinTooMuchTNT)
            .and(require(TargetedMod.ENDLESSIDS)),
        "toomuchtnt.MixinTooMuchTNT"),
    common_elijahschocolate_MixinEntityChocolateCreeper(Side.COMMON,
        require(TargetedMod.ELIJAHSCHOCOLATEMOD)
            .and(m -> OptimizationsandTweaksConfig.enableMixinEntityChocolateCreeper)
            .and(require(TargetedMod.CONFIGHELPER)),
        "elijahschocolate.MixinEntityChocolateCreeper"),
    common_fantasticfish_MixinFantasticEvents(Side.COMMON,
        require(TargetedMod.FANTASTICFISH).and(m -> OptimizationsandTweaksConfig.enableMixinFantasticEvents),
        "fantasticfish.MixinFantasticEvents"),
    common_fantasticfish_MixinFantasticMod(Side.COMMON,
        require(TargetedMod.FANTASTICFISH).and(m -> OptimizationsandTweaksConfig.enableMixinFantasticMod),
        "fantasticfish.MixinFantasticMod"),
    common_eldritchempire_MixinEldritchEmpireRegistration(Side.COMMON,
        require(TargetedMod.ELDRITCHEMPIRE).and(m -> OptimizationsandTweaksConfig.enableMixinEldritchEmpireRegistration)
            .and(require(TargetedMod.CONFIGHELPER)),
        "eldritchempire.MixinEldritchEmpireRegistration"),
    common_therealketer_MixinKMOD_Main_Entities(Side.COMMON,
        require(TargetedMod.THEREALKETER).and(m -> OptimizationsandTweaksConfig.enableMixinKMOD_Main_Entities)
            .and(require(TargetedMod.CONFIGHELPER)),
        "therealketer.MixinKMOD_Main_Entities"),
    common_orespiders_MixinEntityRegistererOreSpiders(Side.COMMON,
        require(TargetedMod.ORESPIDERS).and(m -> OptimizationsandTweaksConfig.enableMixinEntityRegistererOreSpiders)
            .and(require(TargetedMod.CONFIGHELPER)),
        "orespiders.MixinEntityRegistererOreSpiders"),
    common_akatsuki_MixinEntitySasori(Side.COMMON,
        require(TargetedMod.AKATSUKI).and(m -> OptimizationsandTweaksConfig.enableMixinEntitySasosri),
        "akatsuki.MixinEntitySasori"),
    common_akatsuki_MixinEntitySasori2(Side.COMMON,
        require(TargetedMod.AKATSUKI).and(m -> OptimizationsandTweaksConfig.enableMixinEntitySasosri2),
        "akatsuki.MixinEntitySasori2"),
    common_akatsuki_MixinPuppetKadz(Side.COMMON,
        require(TargetedMod.AKATSUKI).and(m -> OptimizationsandTweaksConfig.enableMixinPuppetKadz),
        "akatsuki.MixinPuppetKadz"),
    common_akatsuki_MixinAnimTickHandler(Side.COMMON,
        require(TargetedMod.AKATSUKI).and(m -> OptimizationsandTweaksConfig.enableMixinAnimTickHandler),
        "akatsuki.MixinAnimTickHandler"),
    common_akatsuki_MixinAnimationHandler(Side.COMMON,
        require(TargetedMod.AKATSUKI).and(m -> OptimizationsandTweaksConfig.enableMixinAnimationHandler),
        "akatsuki.MixinAnimationHandler"),
    common_aether_MixinPlayerAether(Side.COMMON,
        require(TargetedMod.AETHER).and(m -> OptimizationsandTweaksConfig.enableMixinPlayerAether),
        "aether.MixinPlayerAether"),
    common_aether_MixinPlayerAetherEvents(Side.COMMON,
        require(TargetedMod.AETHER).and(m -> OptimizationsandTweaksConfig.enableMixinPlayerAetherEvents),
        "aether.MixinPlayerAetherEvents"),
    common_cofhcore_MixinHooksCore(Side.COMMON,
        require(TargetedMod.COFHCORE).and(m -> OptimizationsandTweaksConfig.enableMixinHooksCore),
        "cofhcore.MixinHooksCore"),
    common_thaumicrevelation_MixinWardenicChargeEvents(Side.COMMON,
        require(TargetedMod.THAUMICREVELEATION).and(m -> OptimizationsandTweaksConfig.enableMixinWardenicChargeEvents),
        "thaumicrevelation.MixinWardenicChargeEvents"),
    common_aether_MixinAetherTileEntities(Side.COMMON,
        require(TargetedMod.AETHER).and(m -> OptimizationsandTweaksConfig.enableMixinAetherTileEntities),
        "aether.MixinAetherTileEntities"),
    common_etfuturumrequiem_MixinUtils(Side.COMMON,
        require(TargetedMod.ETFUTURMREQUIEM).and(m -> OptimizationsandTweaksConfig.enableMixinUtils),
        "etfuturumrequiem.MixinUtils"),
    common_etfuturumrequiem_MixinDeepslateOreRegistry(Side.COMMON,
        require(TargetedMod.ETFUTURMREQUIEM).and(m -> OptimizationsandTweaksConfig.enableMixinDeepslateOreRegistry),
        "etfuturumrequiem.MixinDeepslateOreRegistry"),
    common_notenoughpets_MixinEventHandlerNEP(Side.COMMON,
        require(TargetedMod.NOTENOUGHPETS).and(m -> OptimizationsandTweaksConfig.enableMixinEventHandlerNEP),
        "notenoughpets.MixinEventHandlerNEP"),
    common_pneumaticraft_MixinHackTickHandler(Side.COMMON,
        require(TargetedMod.PNEUMATICRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinHackTickHandler),
        "pneumaticraft.MixinHackTickHandler"),
    common_ic2_MixinPriorityExecutor(Side.COMMON,
        require(TargetedMod.INDUSTRIALCRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinPriorityExecutor),
        "ic2.MixinPriorityExecutor"),
    common_growthcraft_MixinAppleFuelHandler(Side.COMMON,
        require(TargetedMod.GROWTHCRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinAppleFuelHandler),
        "growthcraft.MixinAppleFuelHandler"),
    common_adventurersamulet_MixinEntityEagle(Side.COMMON,
        require(TargetedMod.ADVENTURERS_AMULETS).and(m -> OptimizationsandTweaksConfig.enableMixinEntityEagle),
        "adventurersamulet.MixinEntityEagle"),

    common_ppap_MixinPPAPEventHandler(Side.COMMON,
        require(TargetedMod.PPAPMOD).and(m -> OptimizationsandTweaksConfig.enableMixinPPAPEventHandler),
        "ppap.MixinPPAPEventHandler"),
    common_core_MixinEntityLiving(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityLiving,
        "core.MixinEntityLiving"),
    common_core_MixinEntityAgeable(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityAgeable,
        "core.MixinEntityAgeable"),
    common_nei_MixinNEIServerUtils(Side.COMMON,
        require(TargetedMod.NEI).and(m -> OptimizationsandTweaksConfig.enableMixinNEIServerUtils),
        "nei.MixinNEIServerUtils"),
    common_nei_MixinConfig(Side.COMMON,
        require(TargetedMod.NEI).and(m -> OptimizationsandTweaksConfig.enableMixinConfig), "ic2.MixinConfig"),
    common_core_MixinBlockLiquid(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinBlockLiquid,
        "core.MixinBlockLiquid"),
    common_core_entity_MixinEntityZombie(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityZombie,
        "core.entity.MixinEntityZombie"),

    common_core_entity_MixinEntityItem(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityItem,
        "core.entity.MixinEntityItem"),
    common_ic2_MixinTickHandler(Side.COMMON,
        require(TargetedMod.INDUSTRIALCRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinTickHandler),
        "ic2.MixinTickHandler"),

    common_core_entity_MixinEntityAnimal(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityAnimal,
        "core.entity.MixinEntityAnimal"),

    common_core_biomes_MixinBiomeGenBase(Side.COMMON,
        avoid(TargetedMod.DRAGONAPI)
            .and(avoid(TargetedMod.ALFHEIM).and(m -> OptimizationsandTweaksConfig.enableMixinBiomeGenBase)),
        "core.biomes.MixinBiomeGenBase"),
    common_core_MixinChunkProviderGenerate(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enableMixinChunkProviderGenerate, "core.MixinChunkProviderGenerate"),
    common_core_MixinCompressedStreamTools(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enableMixinCompressedStreamTools, "core.MixinCompressedStreamTools"),
    common_core_MixinForgeChunkManager(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinForgeChunkManager,
        "core.MixinForgeChunkManager"),
    common_core_MixinAnvilChunkLoader(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinAnvilChunkLoader,
        "core.MixinAnvilChunkLoader"),
    common_core_MixinBlockGrass(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinBlockGrass,
        "core.MixinBlockGrass"),
    common_core_MixinLaunchClassLoader(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinLaunchClassLoader,
        "core.MixinLaunchClassLoader"),
    common_core_entity_MixinEntitySquid(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntitySquid,
        "core.entity.MixinEntitySquid"),
    common_core_MixinWorldChunkManager(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinWorldChunkManager,
        "core.MixinWorldChunkManager"),
    common_core_MixinEntityAITasks(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityAITasks,
        "core.MixinEntityAITasks"),

    common_core_MixinExtendedBlockStorage(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enableMixinExtendedBlockStorage, "core.MixinExtendedBlockStorage"),
    common_core_MixinEntityMoveHelper(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityMoveHelper,
        "core.MixinEntityMoveHelper"),
    common_core_MixinWorldGenMinable(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinWorldGenMinable,
        "core.MixinWorldGenMinable"),
    common_core_MixinLanguageRegistry(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinLanguageRegistry,
        "core.MixinLanguageRegistry"),
    common_core_MixinEntityAIFollowParent(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enableMixinEntityAIFollowParent, "core.MixinEntityAIFollowParent"),
    common_core_MixinEntityMob(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityMob,
        "core.MixinEntityMob"),
    common_jewelrycraft2_MixinEntityEventHandler(Side.COMMON,
        require(TargetedMod.JEWELRYCRAFT2).and(m -> OptimizationsandTweaksConfig.enableMixinEntityEventHandler),
        "jewelrycraft2.MixinEntityEventHandler"),
    common_portalgun_MixinSettings(Side.COMMON,
        require(TargetedMod.PORTALGUN).and(m -> OptimizationsandTweaksConfig.enableMixinSettings),
        "portalgun.MixinSettings"),
    common_core_MixinEntityLookHelper(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinEntityLookHelper,
        "core.MixinEntityLookHelper"),
    common_core_MixinBlockFalling(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinBlockFalling,
        "core.MixinBlockFalling"),

    common_core_MixinLongHashMap(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinLongHashMap,
        "core.MixinLongHashMap"),
    common_core_MixinIntHashMap(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinIntHashMap,
        "core.MixinIntHashMap"),
    common_koto_MixinPatchWorldGenCloudNine(Side.COMMON,
        require(TargetedMod.KINGDOMSOFTHEOVERWORLD).and(
            m -> OptimizationsandTweaksConfig.enableMixinPatchWorldGenCloudNine),
        "koto.MixinPatchWorldGenCloudNine"),
    common_koto_MixinEntityDarkMiresi(Side.COMMON,
        require(TargetedMod.KINGDOMSOFTHEOVERWORLD).and(m -> OptimizationsandTweaksConfig.enableMixinEntityDarkMiresi),
        "koto.MixinEntityDarkMiresi"),
    common_tconstruct_MixinTinkerGears(Side.COMMON,
        require(TargetedMod.TCONSTRUCT).and(m -> OptimizationsandTweaksConfig.enableMixinTinkerGears),
        "tconstruct.MixinTinkerGears"),
    common_weathercarpet_MixinCloudChecking(Side.COMMON,
        require(TargetedMod.WEATHERCARPET).and(m -> OptimizationsandTweaksConfig.enableMixinCloudChecking),
        "weathercarpet.MixinCloudChecking"),
    common_remoteio_MixinLocalizationUpdater(Side.COMMON,
        require(TargetedMod.REMOTEIO).and(m -> OptimizationsandTweaksConfig.enableMixinLocalizationUpdater),
        "remoteio.MixinLocalizationUpdater"),
    common_birdsnest_MixinBirdNests(Side.COMMON,
        require(TargetedMod.BIRDSNEST).and(m -> OptimizationsandTweaksConfig.disableBirdNestVersionChecker),
        "birdsnest.MixinBirdNests"),
    common_birdsnest_MixinOnJoinWorldHandlerBird(Side.COMMON,
        require(TargetedMod.BIRDSNEST).and(m -> OptimizationsandTweaksConfig.disableBirdNestVersionChecker),
        "birdsnest.MixinOnJoinWorldHandlerBird"),
    common_thaumcraft_MixinBlockAiry(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinBlockAiry),
        "thaumcraft.MixinBlockAiry"),
    common_thaumcraft_MixinMappingThread(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinMappingThread),
        "thaumcraft.MixinMappingThread"),
    common_thaumcraft_MixinEventHandlerEntity(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinEventHandlerEntity),
        "thaumcraft.MixinEventHandlerEntity"),
    common_codechickencore_MixinClassDiscoverer(Side.COMMON,
        require(TargetedMod.CODECHICKENCORE).and(m -> OptimizationsandTweaksConfig.enableMixinClassDiscoverer),
        "codechickencore.MixinClassDiscoverer"),
    common_traincraft_MixinTierRecipeManager(Side.COMMON,
        require(TargetedMod.TRAINCRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinTierRecipeManager),
        "traincraft.MixinTierRecipeManager"),
    common_lootpluplus_MixinLootPPHelper(Side.COMMON,
        require(TargetedMod.LOOTPLUSPLUS).and(m -> OptimizationsandTweaksConfig.enableMixinLootPPHelper),
        "lootpluplus.MixinLootPPHelper"),
    common_matmos_MixinForgeBase(Side.COMMON,
        require(TargetedMod.MATMOS).and(m -> OptimizationsandTweaksConfig.enableOptimizeMatmos),
        "matmos.MixinForgeBase"),
    common_matmos_MixinBlockCountModule(Side.COMMON,
        require(TargetedMod.MATMOS).and(m -> OptimizationsandTweaksConfig.enableOptimizeMatmos),
        "matmos.MixinBlockCountModule"),

    common_matmos_MixinScanVolumetric(Side.COMMON,
        require(TargetedMod.MATMOS).and(m -> OptimizationsandTweaksConfig.enableOptimizeMatmos),
        "matmos.MixinScanVolumetric"),

    common_matmos_MixinScanRaycast(Side.COMMON,
        require(TargetedMod.MATMOS).and(m -> OptimizationsandTweaksConfig.enableOptimizeMatmos),
        "matmos.MixinScanRaycast"),
    common_matmos_MixinScannerModule(Side.COMMON,
        require(TargetedMod.MATMOS).and(m -> OptimizationsandTweaksConfig.enableOptimizeMatmos),
        "matmos.MixinScannerModule"),
    common_matmos_MixinSheetDataPackage(Side.COMMON,
        require(TargetedMod.MATMOS).and(m -> OptimizationsandTweaksConfig.enableOptimizeMatmos),
        "matmos.MixinSheetDataPackage"),
    common_thaumcraftminusthaumcraft_MixinUnthaumic(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinUnthaumic),
        "thaumcraftminusthaumcraft.MixinUnthaumic"),
    common_automagy_MixinAutomagyEventHandler(Side.COMMON,
        require(TargetedMod.AUTOMAGY).and(m -> OptimizationsandTweaksConfig.enableMixinAutomagyEventHandler),
        "automagy.MixinAutomagyEventHandler"),
    common_thaumcraft_MixinPatchBiomeGenMagicalForest(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinPatchBiomeGenMagicalForest),
        "thaumcraft.MixinPatchBiomeGenMagicalForest"),
    common_thaumcraft_MixinPatchBlockMagicalLeavesPerformances(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4)
            .and(m -> OptimizationsandTweaksConfig.enableMixinPatchBlockMagicalLeavesPerformances),
        "thaumcraft.MixinPatchBlockMagicalLeavesPerformances"),

    common_ragdollcorpse_MixinEventHandler_Ragdoll(Side.COMMON,
        require(TargetedMod.RAGDOLLCORPSE).and(m -> OptimizationsandTweaksConfig.enableMixinRagdollCorpse),
        "ragdollcorpse.MixinEventHandler_Ragdoll"),
    common_thaumcraft_MixinScanManager(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinScanManager),
        "thaumcraft.MixinScanManager"),
    common_thaumcraft_MixinThaumcraftCraftingManager(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinThaumcraftCraftingManager),
        "thaumcraft.MixinThaumcraftCraftingManager"),
    common_thaumcraft_MixinThaumcraftApi(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableFixThaumonomiconBookNullCrashes),
        "thaumcraft.MixinThaumcraftApi"),
    common_gadomancy_MixinInfusionVisualDisguiseArmor(Side.COMMON,
        require(TargetedMod.GADOMANCY).and(m -> OptimizationsandTweaksConfig.enableFixThaumonomiconBookNullCrashes),
        "gadomancy.MixinInfusionVisualDisguiseArmor"),
    common_extrautilities_MixinThaumcraftHelperEU(Side.COMMON,
        require(TargetedMod.EXTRAUTILS).and(m -> OptimizationsandTweaksConfig.enableMixinThaumcraftHelperEU),
        "extrautilities.MixinThaumcraftHelperEU"),
    client_extrautilities_MixinBlockBreakingRegistry(Side.CLIENT,
        require(TargetedMod.EXTRAUTILS).and(m -> OptimizationsandTweaksConfig.enableMixinBlockBreakingRegistry),
        "extrautilities.MixinBlockBreakingRegistry"),
    common_eternalfrost_MixinEFConfiguration(Side.COMMON,
        require(TargetedMod.ETERNALFROST).and(m -> OptimizationsandTweaksConfig.enableMixinEFConfiguration),
        "eternalfrost.MixinEFConfiguration"),
    common_blocklings_MixinItemBlockling(Side.COMMON,
        require(TargetedMod.BLOCKLINGS).and(m -> OptimizationsandTweaksConfig.enableMixinItemBlockling),
        "blocklings.MixinItemBlockling"),
    common_colorediron_MixinColoredIron(Side.COMMON,
        require(TargetedMod.COLOREDIRON).and(m -> OptimizationsandTweaksConfig.enableMixinColoredIron),
        "colorediron.MixinColoredIron"),
    common_nei_MixinWorldOverlayRenderer(Side.COMMON,
        require(TargetedMod.NEI).and(m -> OptimizationsandTweaksConfig.enableMixinWorldOverlayRenderer),
        "nei.MixinWorldOverlayRenderer"),
    common_buildcraft_addon_oiltweaks_MixinBuildCraftConfig(Side.COMMON,
        require(TargetedMod.BUILDCRAFTOILTWEAKS).and(m -> OptimizationsandTweaksConfig.enableMixinBuildCraftConfig),
        "buildcraft.addon.oiltweaks.MixinBuildCraftConfig"),
    common_mankini_MixinBatMankiniJump(Side.COMMON,
        require(TargetedMod.MANKINI).and(m -> OptimizationsandTweaksConfig.enableMixinBatMankiniJump),
        "mankini.MixinBatMankiniJump"),

    common_experienceore_MixinWorldGenHandlerExperienceOre(Side.COMMON,
        require(TargetedMod.EXPERIENCEORE)
            .and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenHandlerExperienceOre),
        "experienceore.MixinWorldGenHandlerExperienceOre"),
    common_buildcraft_MixinSpringPopulate(Side.COMMON,
        require(TargetedMod.BUILDCRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinSpringPopulate),
        "buildcraft.MixinSpringPopulate"),

    common_diseasecraft_MixinMedUtils(Side.COMMON,
        require(TargetedMod.DISEASECRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinMedUtils),
        "diseasecraft.MixinMedUtils"),
    common_potionshards_MixinEventHandlerPotionShards(Side.COMMON,
        require(TargetedMod.POTIONSHARDS).and(m -> OptimizationsandTweaksConfig.enableMixinEventHandlerPotionShards),
        "potionshards.MixinEventHandlerPotionShards"),
    common_goblins_MixinMobSpawnerGoblinLogic(Side.COMMON,
        require(TargetedMod.GOBLINS).and(m -> OptimizationsandTweaksConfig.enableMixinMobSpawnerGoblinLogic),
        "goblins.MixinMobSpawnerGoblinLogic"),
    common_xtracraft_MixinXCEntityGod(Side.COMMON,
        require(TargetedMod.XTRACRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinXCEntityGod),
        "xtracraft.MixinXCEntityGod"),
    common_goblins_MixinGOBLINWorldGenGVillage1(Side.COMMON,
        require(TargetedMod.GOBLINS).and(m -> OptimizationsandTweaksConfig.enableMixinGOBLINWorldGenGVillage1),
        "goblins.MixinGOBLINWorldGenGVillage1"),
    common_goblins_MixinGOBLINWorldGenFireplace(Side.COMMON,
        require(TargetedMod.GOBLINS).and(m -> OptimizationsandTweaksConfig.enableMixinGOBLINWorldGenFireplace),
        "goblins.MixinGOBLINWorldGenFireplace"),
    common_goblins_MixinGOBLINWorldGenHuts(Side.COMMON,
        require(TargetedMod.GOBLINS).and(m -> OptimizationsandTweaksConfig.enableMixinGOBLINWorldGenHuts),
        "goblins.MixinGOBLINWorldGenHuts"),
    common_fossilsandarcheologyrevivals_MixinAcademyGenerator(Side.COMMON,
        require(TargetedMod.FOSSILANDARCHEOLOGYREVIVAL)
            .and(m -> OptimizationsandTweaksConfig.enableMixinAcademyGenerator),
        "fossilsandarcheologyrevivals.MixinAcademyGenerator"),
    common_fossilsandarcheologyrevivals_MixinTarGenerator(Side.COMMON,
        require(TargetedMod.FOSSILANDARCHEOLOGYREVIVAL).and(m -> OptimizationsandTweaksConfig.enableMixinTarGenerator),
        "fossilsandarcheologyrevivals.MixinTarGenerator"),
    common_fossilsandarcheologyrevivals_MixinShipWreckGenerator(Side.COMMON,
        require(TargetedMod.FOSSILANDARCHEOLOGYREVIVAL)
            .and(m -> OptimizationsandTweaksConfig.enableMixinShipWreckGenerator),
        "fossilsandarcheologyrevivals.MixinShipWreckGenerator"),
    common_fossilsandarcheologyrevivals_MixinWorldGenMiscStructures(Side.COMMON,
        require(TargetedMod.FOSSILANDARCHEOLOGYREVIVAL)
            .and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenMiscStructures),
        "fossilsandarcheologyrevivals.MixinWorldGenMiscStructures"),

    common_atum_MixinWorldGenPyramid(Side.COMMON,
        require(TargetedMod.ATUM2).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenPyramid),
        "atum.MixinWorldGenPyramid"),
    common_atum_MixinWorldGenOasis(Side.COMMON,
        require(TargetedMod.ATUM2).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenOasis),
        "atum.MixinWorldGenOasis"),
    common_atum_MixinWorldGenRuins(Side.COMMON,
        require(TargetedMod.ATUM2).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenRuins),
        "atum.MixinWorldGenRuins"),
    common_mythandmonsters_MixinMAMWorldGenerator(Side.COMMON,
        require(TargetedMod.MYTHANDMONSTERS).and(
            require(TargetedMod.RECURRENTCOMPLEX).and(m -> OptimizationsandTweaksConfig.enableMixinMAMWorldGenerator)),
        "mythandmonsters.MixinMAMWorldGenerator"),
    common_mythandmonsters_MixinMAMClientProxy(Side.COMMON,
        require(TargetedMod.MYTHANDMONSTERS).and(m -> OptimizationsandTweaksConfig.enableMixinMAMClientProxy),
        "mythandmonsters.MixinMAMClientProxy"),
    common_hamsterific_MixinEntityHamster(Side.COMMON,
        require(TargetedMod.HAMSTERIFIC).and(m -> OptimizationsandTweaksConfig.enableMixinEntityHamster),
        "hamsterific.MixinEntityHamster"),
    common_ganysnether_MixinNetherWorldGenGanys(Side.COMMON,
        require(TargetedMod.HAMSTERIFIC).and(m -> OptimizationsandTweaksConfig.enableMixinNetherWorldGenGanys),
        "ganysnether.MixinNetherWorldGenGanys"),
    common_thaumicrevelation_MixinKeyHandlerTHAUMREV(Side.COMMON,
        require(TargetedMod.THAUMICREVELEATION).and(m -> OptimizationsandTweaksConfig.enableMixinKeyHandlerTHAUMREV),
        "thaumicrevelation.MixinKeyHandlerTHAUMREV"),
    common_industrialupgrade_MixinRegisterOreDict(Side.COMMON,
        require(TargetedMod.INDUSTRIALUPGRADE).and(m -> OptimizationsandTweaksConfig.enableMixinRegisterOreDict),
        "industrialupgrade.MixinRegisterOreDict"),
    common_gemsnjewels_MixinModBlocksGemsNJewels(Side.COMMON,
        require(TargetedMod.GEMSNJEWELS).and(m -> OptimizationsandTweaksConfig.enableMixinModBlocksGemsNJewels),
        "gemsnjewels.MixinModBlocksGemsNJewels"),
    common_farlanders_MixinEntityEnderGolem(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityEnderGolem"),
    common_farlanders_MixinEntityEnderminion(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityEnderminion"),
    common_farlanders_MixinEntityFarlander(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityFarlander"),
    common_farlanders_MixinEntityLootr(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityLootr"),
    common_farlanders_MixinEntityMysticEnderminion(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityMysticEnderminion"),
    common_farlanders_MixinEntityWanderer(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityWanderer"),
    common_farlanders_MixinEntityTitan(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityTitan"),
    common_farlanders_MixinEntityRebel(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityRebel"),
    common_farlanders_MixinEntityMystic(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityMystic"),
    common_farlanders_MixinEntityEnderGuardian(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityEnderGuardian"),
    common_farlanders_MixinEntityElder(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityElder"),
    common_farlanders_MixinEntityFanEnderman(Side.COMMON,
        require(TargetedMod.FARLANDERS)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixUnableToPlayUnknowSoundEventFromFarlandersmod),
        "farlanders.MixinEntityFanEnderman"),
    common_thaumcraft_MixinFixCascadingWorldGenFromThaumcraftWorldGenerator(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixCascadingWorldGenFromThaumcraftWorldGenerator),
        "thaumcraft.MixinFixCascadingWorldGenFromThaumcraftWorldGenerator"),
    common_thaumcraft_MixinWorldGenGreatwoodTrees(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenGreatwoodTrees),
        "thaumcraft.MixinWorldGenGreatwoodTrees"),
    common_thaumcraft_MixinWorldGenSilverwoodTrees(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenSilverwoodTrees),
        "thaumcraft.MixinWorldGenSilverwoodTrees"),
    common_thaumcraft_MixinWorldGenEldritchRing(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenEldritchRing),
        "thaumcraft.MixinWorldGenEldritchRing"),

    common_thaumcraft_MixinThaumcraftUtils(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinThaumcraftUtils),
        "thaumcraft.MixinThaumcraftUtils"),

    common_thaumcraft_MixinWorldGenCustomFlowersSide(Side.COMMON,
        require(TargetedMod.THAUMCRAFT4).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenCustomFlowers),
        "thaumcraft.MixinWorldGenCustomFlowers"),

    common_masterchef_MixinWorldGenNori(Side.COMMON,
        require(TargetedMod.MASTERCHEF).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenNori),
        "masterchef.MixinWorldGenNori"),
    common_gardenstuff_MixinWorldGenCandelilla(Side.COMMON,
        require(TargetedMod.GARDENSTUFF).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenCandelilla),
        "gardenstuff.MixinWorldGenCandelilla"),
    common_pamsharvestcraft_MixinFixWorldGenPamFruitTree(Side.COMMON,
        require(TargetedMod.PAMSHARVESTCRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinFixWorldGenPamFruitTree),
        "pamsharvestcraft.MixinFixWorldGenPamFruitTree"),
    common_steamcraft2_MixinFixCascadingFromWorldGenBrassTree(Side.COMMON,
        require(TargetedMod.STEAMCRAFT2)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixCascadingFromWorldGenBrassTree),
        "steamcraft2.MixinFixCascadingFromWorldGenBrassTree"),
    common_cofhcore_MixinCOFHCORE(Side.COMMON,
        require(TargetedMod.COFHCORE).and(m -> OptimizationsandTweaksConfig.enableMixinCOFHCORE),
        "cofhcore.MixinCOFHCORE"),
    common_cofhcore_MixinUpdateCheckThreadCOFH(Side.COMMON,
        require(TargetedMod.COFHCORE).and(m -> OptimizationsandTweaksConfig.enableMixinCOFHCORE),
        "cofhcore.MixinUpdateCheckThreadCOFH"),
    common_cofhcore_fixoredictcrash_MixinOreDictionaryArbiter(Side.COMMON,
        require(TargetedMod.COFHCORE).and(m -> OptimizationsandTweaksConfig.enableMixinOreDictCofhFix),
        "cofhcore.fixoredictcrash.MixinOreDictionaryArbiter"),
    common_cofhcore_MixinBlockTickingWater(Side.COMMON,
        require(TargetedMod.COFHCORE).and(m -> OptimizationsandTweaksConfig.enableMixinBlockTickingWater),
        "cofhcore.MixinBlockTickingWater"),
    common_slimecarnage_MixinFixCascadingFromWorldGenSlimeCarnage(Side.COMMON,
        require(TargetedMod.SLIMECARNAGE)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixCascadingFromWorldGenSlimeCarnage),
        "slimecarnage.MixinFixCascadingFromWorldGenSlimeCarnage"),

    common_slimecarnage_MixinWorldGenSewers(Side.COMMON,
        require(TargetedMod.SLIMECARNAGE)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixCascadingFromWorldGenSlimeCarnage),
        "slimecarnage.MixinWorldGenSewers"),

    common_slimecarnage_MixinWorldGenMadLab(Side.COMMON,
        require(TargetedMod.SLIMECARNAGE).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenMadLab),
        "slimecarnage.MixinWorldGenMadLab"),
    common_familliarsAPI_MixinFamiliar(Side.COMMON,
        require(TargetedMod.FAMILIARSAPI).and(m -> OptimizationsandTweaksConfig.enableMixinFamiliar),
        "familliarsAPI.MixinFamiliar"),
    common_pamsharvestcraft_MixinFixPamsTreesCascadingWorldgenLag(Side.COMMON,
        require(TargetedMod.PAMSHARVESTCRAFT)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixPamsTreesCascadingWorldgenLag),
        "pamsharvestcraft.MixinFixPamsTreesCascadingWorldgenLag"),
    common_hardcorewither_MixinEventHandler(Side.COMMON,
        require(TargetedMod.HARDCOREWITHER).and(m -> OptimizationsandTweaksConfig.enableMixinEventHandler),
        "hardcorewither.MixinEventHandler"),
    common_shincolle_MixinEVENT_BUS_EventHandler(Side.COMMON,
        require(TargetedMod.SHINCOLLE).and(m -> OptimizationsandTweaksConfig.enableMixinEVENT_BUS_EventHandler),
        "shincolle.MixinEVENT_BUS_EventHandler"),
    common_betterburning_MixinBetterBurning(Side.COMMON,
        require(TargetedMod.BETTERBURNING).and(m -> OptimizationsandTweaksConfig.enableMixinBetterBurning),
        "betterburning.MixinBetterBurning"),
    common_MixinFixCascadingFromShipwreckGen(Side.COMMON,
        require(TargetedMod.SHIPEWRECK).and(m -> OptimizationsandTweaksConfig.enableMixinFixCascadingFromShipwreckGen),
        "shipwreck.MixinFixCascadingFromShipwreckGen"),
    common_shincolle_MixinFixCascadingFromWorldGenPolyGravel(Side.COMMON,
        require(TargetedMod.SHINCOLLE)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixCascadingFromWorldGenPolyGravel),
        "shincolle.MixinFixCascadingFromWorldGenPolyGravel"),
    common_shincolle_MixinFixCascadingFromShinColleWorldGen(Side.COMMON,
        require(TargetedMod.SHINCOLLE)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixCascadingFromShinColleWorldGen),
        "shincolle.MixinFixCascadingFromShinColleWorldGen"),
    common_obsgreenery_MixinWorldGenTreeBase(Side.COMMON,
        require(TargetedMod.OBSGREENERY).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenTreeBase),
        "obsgreenery.MixinWorldGenTreeBase"),
    common_obsgreenery_MixinWorldGenTreeBlackWattle(Side.COMMON,
        require(TargetedMod.OBSGREENERY).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenTreeBlackWattle),
        "obsgreenery.MixinWorldGenTreeBlackWattle"),

    common_minefactoryreloaded_MixinWorldGenMassiveTree(Side.COMMON,
        require(TargetedMod.MINEFACTORYRELOADED).and(m -> OptimizationsandTweaksConfig.enableMixinWorldGenMassiveTree),
        "minefactoryreloaded.MixinWorldGenMassiveTree"),
    common_minefactoryreloaded_MixinFixCascadingforMineFactoryReloadedWorldGen(Side.COMMON,
        require(TargetedMod.MINEFACTORYRELOADED)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixCascadingforMineFactoryReloadedWorldGen),
        "minefactoryreloaded.MixinFixCascadingforMineFactoryReloadedWorldGen"),
    common_minefactoryreloaded_MixinFixWorldGenLakesMetaCascadingWorldgenLag(Side.COMMON,
        require(TargetedMod.MINEFACTORYRELOADED).and(
            m -> OptimizationsandTweaksConfig.enableMixinFixWorldGenLakesMetaMinefactoryReloadedCascadingWorldgenFix),
        "minefactoryreloaded.MixinFixWorldGenLakesMetaCascadingWorldgenLag"),
    common_minefactoryreloaded_MixinFixRubberTreesCascadingWorldgenLag(Side.COMMON,
        require(TargetedMod.MINEFACTORYRELOADED)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixRubberTreesMinefactoryReloadedCascadingWorldgenFix),
        "minefactoryreloaded.MixinFixRubberTreesCascadingWorldgenLag"),
    common_minefactoryreloaded_MixinFixNoSuchMethodException(Side.COMMON,
        require(TargetedMod.MINEFACTORYRELOADED)
            .and(m -> OptimizationsandTweaksConfig.enableMixinFixNoSuchMethodException),
        "minefactoryreloaded.MixinFixNoSuchMethodException"),

    common_core_MixinGodZillaFix(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinGodZillaFix,
        "core.MixinGodZillaFix"),

    common_witchery_MixinGenericEventsWitchery(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enableMixinGenericEventsWitchery, "witchery.MixinGenericEventsWitchery"),
    common_opis_MixinopisProfilerEvent(Side.COMMON,
        require(TargetedMod.OPIS).and(m -> OptimizationsandTweaksConfig.enableMixinopisProfilerEvent),
        "opis.MixinopisProfilerEvent"),
    common_core_MixinStatList(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinStatList, "core.MixinStatList"),

    common_malcore_MixinVersionInfo(Side.COMMON,
        require(TargetedMod.MALCORE).and(m -> OptimizationsandTweaksConfig.enableMixinVersionInfo),
        "malcore.MixinVersionInfo"),

    common_kitchencraft_MixinKitchenCraftMachines(Side.COMMON,
        require(TargetedMod.KITCHENCRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinKitchenCraftMachines),
        "kitchencraft.MixinKitchenCraftMachines"),
    common_grim3212_MixinGrimModule(Side.COMMON,
        require(TargetedMod.GRIM3212).and(m -> OptimizationsandTweaksConfig.enableMixinGrimModule),
        "grim3212.MixinGrimModule"),

    // CLIENT MIXINS

    client_core_MixinGuiNewChat(Side.CLIENT, m -> OptimizationsandTweaksConfig.enableMixinGuiNewChat,
        "core.MixinGuiNewChat"),
    client_instrumentus_MixinPlayerSpecials(Side.CLIENT,
        require(TargetedMod.INSTRUMENTUS).and(m -> OptimizationsandTweaksConfig.enableMixinPlayerSpecials),
        "instrumentus.MixinPlayerSpecials"),

    client_core_MixinGui(Side.CLIENT, m -> OptimizationsandTweaksConfig.enableMixinGui, "core.MixinGui"),
    client_core_MixinRenderItem(Side.CLIENT,
        avoid(TargetedMod.FASTCRAFT).and(m -> OptimizationsandTweaksConfig.enableMixinRenderItem),
        "core.MixinRenderItem"),
    client_core_MixinRenderGlobal(Side.CLIENT, avoid(TargetedMod.FASTCRAFT).and(avoid(TargetedMod.OPTIFINE))
        .and(m -> OptimizationsandTweaksConfig.enableMixinRenderGlobal), "core.MixinRenderGlobal"),
    client_core_MixinRenderManager(Side.CLIENT,
        avoid(TargetedMod.SKINPORT)
            .and(avoid(TargetedMod.ANGELICA).and(m -> OptimizationsandTweaksConfig.enableMixinRenderManager)),
        "core.MixinRenderManager"),
    client_essenceofthegod_MixinBarTickHandler(Side.CLIENT,
        m -> OptimizationsandTweaksConfig.enableMixindisablingguifromEssenceofthegod,
        "essenceofthegod.MixinBarTickHandler"),
    client_essenceofthegod_MixinPlayerStats(Side.CLIENT,
        m -> OptimizationsandTweaksConfig.enableMixindisablingguifromEssenceofthegod,
        "essenceofthegod.MixinPlayerStats"),

    client_davincivessels_MixinShipKeyHandler(Side.CLIENT,
        require(TargetedMod.DAVINCIVESSELS).and(m -> OptimizationsandTweaksConfig.enableMixinShipKeyHandler),
        "davincivessels.MixinShipKeyHandler"),
    client_practicallogistics_MixinEventRegistry(Side.CLIENT,
        require(TargetedMod.PRACTICALLOGISTICS).and(m -> OptimizationsandTweaksConfig.enableMixinEventRegistry),
        "practicallogistics.MixinEventRegistry"),

    common_angelica_MixinClientProxy(Side.COMMON,
        require(TargetedMod.ANGELICA).and(m -> OptimizationsandTweaksConfig.enableMixinClientProxy),
        "angelica.MixinClientProxy"),
    client_core_MixinTextureManager(Side.CLIENT, m -> OptimizationsandTweaksConfig.enableMixinTextureManager,
        "core.MixinTextureManager"),
    client_core_MixinEntitySpellParticleFX(Side.CLIENT,
        m -> OptimizationsandTweaksConfig.enableMixinEntitySpellParticleFX, "core.MixinEntitySpellParticleFX"),
    client_core_MixinCodecIBXM(Side.CLIENT, m -> OptimizationsandTweaksConfig.enableMixinCodecIBXM,
        "core.MixinCodecIBXM"),

    client_core_MixinTesselator(Side.CLIENT,
        avoid(TargetedMod.OPTIFINE).and(m -> OptimizationsandTweaksConfig.enableMixinTesselator),
        "core.MixinTesselator"),
    /*
     * common_core_MixinPatchSpawnerAnimals(Side.COMMON,
     * avoid(TargetedMod.JAS)
     * .and(avoid(TargetedMod.DRAGONBLOCKC))
     * .and(m -> OptimizationsandTweaksConfig.enableMixinPatchSpawnerAnimals),
     * "core.MixinPatchSpawnerAnimals"),
     */
    common_core_MixinNetHandlerPlayClient(Side.COMMON,
        m -> OptimizationsandTweaksConfig.enableMixinNetHandlerPlayClient, "core.MixinNetHandlerPlayClient"),
    common_core_MixinPatchSpawnerAnimals(Side.COMMON, m -> OptimizationsandTweaksConfig.enableMixinPatchSpawnerAnimals,
        "core.MixinPatchSpawnerAnimals"),
    client_core_MixinOpenGlHelper(Side.CLIENT, m -> OptimizationsandTweaksConfig.enableMixinOpenGlHelper,
        "core.MixinOpenGlHelper"),
    client_core_MixinEntityRenderer(Side.CLIENT, avoid(TargetedMod.OPTIFINE).and(avoid(TargetedMod.FASTCRAFT))
        .and(avoid(TargetedMod.ALFHEIM).and(m -> OptimizationsandTweaksConfig.enableMixinEntityRenderer)),
        "core.MixinEntityRenderer"),
    client_core_MixinModelRenderer(Side.CLIENT,
        avoid(TargetedMod.OPTIFINE)
            .and(avoid(TargetedMod.ANGELICA).and(m -> OptimizationsandTweaksConfig.enableMixinModelRenderer)),
        "core.MixinModelRenderer"),
    client_core_MixinStitcher_Slot(Side.CLIENT, m -> OptimizationsandTweaksConfig.enableMixinStitcher,
        "core.MixinStitcher_Slot"),

    client_core_MixinStitcher(Side.CLIENT, m -> OptimizationsandTweaksConfig.enableMixinStitcher, "core.MixinStitcher"),
    client_core_MixinTextureUtil(Side.CLIENT, m -> OptimizationsandTweaksConfig.enableMixinTextureUtil,
        "core.MixinTextureUtil"),
    client_core_MixinItemRenderer(Side.CLIENT, m -> OptimizationsandTweaksConfig.enableMixinItemRenderer,
        "core.MixinItemRenderer"),
    client_core_MixinFontRenderer(Side.CLIENT,
        avoid(TargetedMod.OPTIFINE).and(m -> OptimizationsandTweaksConfig.enableMixinFontRenderer)
            .and(avoid(TargetedMod.SMOOTHFONT)),
        "core.MixinFontRenderer"),

    // MOD-FILTERED MIXINS

    // The modFilter argument is a predicate, so you can also use the .and(), .or(), and .negate() methods to mix and
    // match multiple predicates.
    ;

    @Getter
    public final Side side;
    @Getter
    public final Predicate<List<ITargetedMod>> filter;
    @Getter
    public final String mixin;

    static Predicate<List<ITargetedMod>> require(TargetedMod in) {
        return modList -> modList.contains(in);
    }

    static Predicate<List<ITargetedMod>> avoid(TargetedMod in) {
        return modList -> !modList.contains(in);
    }
}
